using Microsoft.Playwright;
using System.Linq;

namespace {{namespace}}
{
  public partial class {{name}} : Yapoml.Playwright.Page
  {
    public {{name}}(IPage page, Yapoml.Options.ISpaceOptions spaceOptions)
        : base(page, spaceOptions)
    {
      
    }

    {{ for component in components}}
    public {{ if component.is_plural }}System.Collections.Generic.IList<{{component.singular_name}}Component>{{ else }}{{component.name}}Component{{ end }} {{component.name}}
    {
      get
      {
        var by = "{{ component.by.value }}";
        
        {{ if component.is_plural }}
        EventSource.RaiseOnFindingComponents("{{component.name}}", by);
        var locator = Page.Locator(by);
        var count = locator.CountAsync().GetAwaiter().GetResult();
        var listLocators = new System.Collections.Generic.List<ILocator>();
        for(var i = 0; i < count; i++)
        {
          listLocators.Add(locator.Nth(i));
        }
        EventSource.RaiseOnFoundComponents(by, listLocators);
        return listLocators.Select(l => SpaceOptions.Get<Yapoml.Playwright.Factory.IComponentFactory>().Create<{{component.singular_name}}Component>(Page, l, SpaceOptions)).ToList();
        {{ else }}
        EventSource.RaiseOnFindingComponent("{{component.name}}", by);
        var locator = Page.Locator(by);
        EventSource.RaiseOnFoundComponent(by, Page, locator);
        return SpaceOptions.Get<Yapoml.Playwright.Factory.IComponentFactory>().Create<{{component.name}}Component>(Page, locator, SpaceOptions);
        {{ end }}
      }
    }

    {{ include 'NestedComponentTemplate' component }}
    {{ end }}
  }
}