# pragma warning disable
using Microsoft.Playwright;
using System.Linq;

namespace {{namespace}}
{
	[System.Runtime.CompilerServices.CompilerGenerated]
	public partial class {{name}} : {{ if base_page }}{{ base_page.namespace }}.{{base_page.name}}{{else}}{{workspace.root_namespace}}.Page{{end}}
	{
		public {{name}}(IPage page, Yapoml.Framework.Options.ISpaceOptions spaceOptions)
			: base(page, spaceOptions)
		{

		}

		{{- if url }}
		/// <summary>
		/// Navigates to <c>{{ url.path }}</c>
		/// </summary>
		public async System.Threading.Tasks.Task<{{ name }}> Open(
		{{- for segment in url.segments }}{{ if for.first == false }}, {{ end }}string {{ segment }}{{ end }}
		{{- for param in url.params }} {{ if url.segments && for.first }}, {{ end }}{{ if for.first == false }}, {{ end }}string {{ param }} = null{{ end }})
		{
			var baseUrl = SpaceOptions.Services.Get<Yapoml.Playwright.BaseUrl>().Url;

			var segments = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>() { 
				{{- for segment in url.segments }}{{ if for.first == false }}, {{end}}new System.Collections.Generic.KeyValuePair<string, string>("{{ segment }}", {{ segment }}) {{ end -}} 
			};

			var queryParams = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>() { 
				{{- for param in url.params }}{{ if for.first == false }}, {{end}}new System.Collections.Generic.KeyValuePair<string, string>("{{ param }}", {{ param }}) {{ end -}} 
			};

			var navService = new Yapoml.Playwright.Services.NavigationService(baseUrl);
			await Page.GotoAsync(navService.BuildUri("{{ url.path }}", segments, queryParams));

			return this;
		}
		{{ end }}

		{{- for component in components }}
		/// <summary>
		{{ include 'NestedComponentTemplate_Desc' component }}
		/// </summary>
		{{- if component.by.segments == null }}
		public {{ if component.is_plural }}System.Collections.Generic.IList<{{get_component_return_type component}}>{{ else }}{{get_component_return_type component}}{{ end }} {{component.name}}
		{
			get
			{
				{{ if component.by.method == 'Id' -}}
				var by = "#{{ component.by.value }}";
				{{ end -}}

				{{ if component.by.method == 'Css' -}}
				var by = "{{ component.by.value }}";
				{{ end -}}

				{{ if component.by.method == 'XPath' -}}
				var by = "xpath={{ component.by.value }}";
				{{ end -}}

				{{ if component.by.method == 'None' -}}
				{{ if is_xpath component.by.value }}
				var by = "xpath={{ component.by.value }}";
				{{ else }}
				var by = "{{ component.by.value }}";
				{{ end -}}
				{{ end -}}
		
				{{ if component.is_plural }}
				EventSource.RaiseOnFindingComponents("{{component.name}}", by);
				var locator = Page.Locator(by);
				var count = locator.CountAsync().GetAwaiter().GetResult();
				var listLocators = new System.Collections.Generic.List<ILocator>();
				for(var i = 0; i < count; i++)
				{
					listLocators.Add(locator.Nth(i));
				}
				EventSource.RaiseOnFoundComponents(by, listLocators);
				return listLocators.Select(l => SpaceOptions.Services.Get<Yapoml.Playwright.Factory.IComponentFactory>().Create<{{component.singular_name}}Component>(Page, l, SpaceOptions)).ToList();
				{{ else }}
				EventSource.RaiseOnFindingComponent("{{component.name}}", by);
				var locator = Page.Locator(by);
				EventSource.RaiseOnFoundComponent(by, Page, locator);
				return SpaceOptions.Services.Get<Yapoml.Playwright.Factory.IComponentFactory>().Create<{{component.name}}Component>(Page, locator, SpaceOptions);
				{{- end }}
			}
		}
		{{ else }}
		public {{ if component.is_plural }}System.Collections.Generic.IList<{{get_component_return_type component}}>{{ else }}{{get_component_return_type component}}{{ end }} {{component.name}}({{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}string {{ segment }}{{ end }})
		{
			var segments = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>() { 
				{{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}new System.Collections.Generic.KeyValuePair<string, string>("{{ segment }}", {{ segment }}) {{ end }} 
			};

			var byValue = new Yapoml.Selenium.Services.SegmentService().Replace("{{ component.by.value }}", segments);

			{{ if component.by.method == 'Id' -}}
			var by = $"#{byValue}";
			{{ end -}}

			{{ if component.by.method == 'Css' -}}
			var by = byValue;
			{{ end -}}

			{{ if component.by.method == 'XPath' -}}
			var by = $"xpath={byValue}";
			{{ end -}}

			{{ if component.by.method == 'None' -}}
			{{ if is_xpath component.by.value }}
			var by = $"xpath={byValue}";
			{{ else }}
			var by = byValue;
			{{ end -}}
			{{ end -}}

			{{ if component.is_plural }}
			EventSource.RaiseOnFindingComponents("{{component.name}}", by);
			var locator = Page.Locator(by);
			var count = locator.CountAsync().GetAwaiter().GetResult();
			var listLocators = new System.Collections.Generic.List<ILocator>();
			for(var i = 0; i < count; i++)
			{
				listLocators.Add(locator.Nth(i));
			}
			EventSource.RaiseOnFoundComponents(by, listLocators);
			return listLocators.Select(l => SpaceOptions.Services.Get<Yapoml.Playwright.Factory.IComponentFactory>().Create<{{component.singular_name}}Component>(Page, l, SpaceOptions)).ToList();
			{{ else }}
			EventSource.RaiseOnFindingComponent("{{component.name}}", by);
			var locator = Page.Locator(by);
			EventSource.RaiseOnFoundComponent(by, Page, locator);
			return SpaceOptions.Services.Get<Yapoml.Playwright.Factory.IComponentFactory>().Create<{{component.name}}Component>(Page, locator, SpaceOptions);
			{{- end }}
		}
		{{ end }}

		{{- if component.referenced_component == null }}
		{{ include 'NestedComponentTemplate' component }}
		{{ end }}
		{{ end }}
	}
}
# pragma warning restore