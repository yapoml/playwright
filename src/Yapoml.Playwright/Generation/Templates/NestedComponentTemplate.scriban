public class {{$1.name}}Component : Yapoml.Playwright.Component
{
  public {{$1.name}}Component(Microsoft.Playwright.IPage page, Microsoft.Playwright.ILocator locator, Yapoml.Options.ISpaceOptions spaceOptions)
    : base(page, locator, spaceOptions)
  {

  }

  {{ for component in $1.component_generation_contextes -}}
    public {{ if component.is_plural }}System.Collections.Generic.IList<{{component.name}}Component>{{ else }}{{component.name}}Component{{ end }} {{component.name}}
    {
      get
      {
        var by = "{{ component.by.value }}";
        
        {{ if component.is_plural }}
        EventSource.RaiseOnFindingComponents("{{component.name}}", by);
        var locator = WrappedLocator.Locator(by);
        var count = locator.CountAsync().GetAwaiter().GetResult();
        var listLocators = new System.Collections.Generic.List<ILocator>();
        for(var i = 0; i < count; i++)
        {
          listLocators.Add(locator.Nth(i));
        }
        EventSource.RaiseOnFoundComponents(by, listLocators);
        return listLocators.Select(l => new {{component.name}}Component(Page, l, SpaceOptions)).ToList();
        {{ else }}
        EventSource.RaiseOnFindingComponent("{{component.name}}", by);
        var locator = WrappedLocator.Locator(by);
        EventSource.RaiseOnFoundComponent(by, Page, locator);
        return new {{component.name}}Component(Page, locator, SpaceOptions);
        {{ end }}
      }
    }

    {{ include 'NestedComponentTemplate' component }}
  {{ end }}
}