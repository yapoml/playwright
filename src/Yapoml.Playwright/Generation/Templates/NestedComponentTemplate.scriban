public partial class {{if $1.is_plural}}{{$1.singular_name}}{{else}}{{$1.name}}{{end}}Component : {{workspace.root_namespace}}.Component
{
	public {{if $1.is_plural}}{{$1.singular_name}}{{else}}{{$1.name}}{{end}}Component(Microsoft.Playwright.IPage page, Microsoft.Playwright.ILocator locator, Yapoml.Framework.Options.ISpaceOptions spaceOptions)
		: base(page, locator, spaceOptions)
	{

	}

	{{- for component in $1.components }}
	/// <summary>
	{{ include 'NestedComponentTemplate_Desc' component }}
	/// </summary>
	{{- if component.by.segments == null }}
	public {{ if component.is_plural }}System.Collections.Generic.IList<{{get_component_return_type component}}>{{ else }}{{get_component_return_type component}}{{ end }} {{component.name}}
	{
		get
		{
			{{ if component.by.method == 'Id' -}}
			var by = "#{{ component.by.value }}";
			{{ end -}}

			{{ if component.by.method == 'Css' -}}
			var by = "{{ component.by.value }}";
			{{ end -}}

			{{ if component.by.method == 'XPath' -}}
			var by = "xpath={{ component.by.value }}";
			{{ end -}}

			{{ if component.by.method == 'None' -}}
			{{ if is_xpath component.by.value }}
			var by = "xpath={{ component.by.value }}";
			{{ else }}
			var by = "{{ component.by.value }}";
			{{ end -}}
			{{ end -}}
		
			{{ if component.is_plural }}
			EventSource.RaiseOnFindingComponents("{{component.name}}", by);
			var locator = WrappedLocator.Locator(by);
			var count = locator.CountAsync().GetAwaiter().GetResult();
			var listLocators = new System.Collections.Generic.List<ILocator>();
			for(var i = 0; i < count; i++)
			{
			listLocators.Add(locator.Nth(i));
			}
			EventSource.RaiseOnFoundComponents(by, listLocators);
			return listLocators.Select(l => SpaceOptions.Services.Get<Yapoml.Playwright.Factory.IComponentFactory>().Create<{{component.singular_name}}Component>(Page, l, SpaceOptions)).ToList();
			{{ else }}
			EventSource.RaiseOnFindingComponent("{{component.name}}", by);
			var locator = WrappedLocator.Locator(by);
			EventSource.RaiseOnFoundComponent(by, Page, locator);
			return SpaceOptions.Services.Get<Yapoml.Playwright.Factory.IComponentFactory>().Create<{{component.name}}Component>(Page, locator, SpaceOptions);
			{{ end }}
		}
	}
	{{ else }}
	public {{ if component.is_plural }}System.Collections.Generic.IList<{{get_component_return_type component}}>{{ else }}{{get_component_return_type component}}{{ end }} {{component.name}}({{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}string {{ segment }}{{ end }})
	{
		var segments = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>() { 
				{{ for segment in component.by.segments }}{{ if for.first == false }}, {{end}}new System.Collections.Generic.KeyValuePair<string, string>("{{ segment }}", {{ segment }}) {{ end }} 
			};

		var byValue = new Yapoml.Selenium.Services.SegmentService().Replace("{{ component.by.value }}", segments);

		{{ if component.by.method == 'Id' -}}
		var by = $"#{byValue}";
		{{ end -}}

		{{ if component.by.method == 'Css' -}}
		var by = byValue;
		{{ end -}}

		{{ if component.by.method == 'XPath' -}}
		var by = $"xpath={byValue}";
		{{ end -}}

		{{ if component.by.method == 'None' -}}
		{{ if is_xpath component.by.value }}
		var by = $"xpath={byValue}";
		{{ else }}
		var by = byValue;
		{{ end -}}
		{{ end -}}

		{{ if component.is_plural }}
		EventSource.RaiseOnFindingComponents("{{component.name}}", by);
		var locator = Page.Locator(by);
		var count = locator.CountAsync().GetAwaiter().GetResult();
		var listLocators = new System.Collections.Generic.List<ILocator>();
		for(var i = 0; i < count; i++)
		{
			listLocators.Add(locator.Nth(i));
		}
		EventSource.RaiseOnFoundComponents(by, listLocators);
		return listLocators.Select(l => SpaceOptions.Services.Get<Yapoml.Playwright.Factory.IComponentFactory>().Create<{{component.singular_name}}Component>(Page, l, SpaceOptions)).ToList();
		{{ else }}
		EventSource.RaiseOnFindingComponent("{{component.name}}", by);
		var locator = Page.Locator(by);
		EventSource.RaiseOnFoundComponent(by, Page, locator);
		return SpaceOptions.Services.Get<Yapoml.Playwright.Factory.IComponentFactory>().Create<{{component.name}}Component>(Page, locator, SpaceOptions);
		{{- end }}
	}
	{{ end }}

	{{ if component.referenced_component == null }}
	{{ include 'NestedComponentTemplate' component }}
	{{ end }}
	{{ end }}
}